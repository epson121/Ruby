var search_data = {"index":{"searchIndex":["a","binarydecimalconverter","c","m","n","d","car","cartesianproduct","class","dessert","diagonalmatrixprint","enumerable","foo","il","node","jellybean","nosuchstrategyerror","numeric","object","palantir","stack","stacklike","string","wrongnumberofplayerserror","add_make()","attr_accessor_with_history()","bin_to_dec()","calories()","calories=()","change_distribution()","combine_anagrams()","contains_game()","convert_to_base_10()","convert_to_postfix()","count_words()","dec_to_bin()","delicious?()","delicious?()","each()","evaluate_postfix()","fibo_memoized()","fibo_n()","flavor()","flavor=()","frm()","get_matrix()","healthy?()","hello()","hello()","is_anagram()","make_mates()","method_missing()","name()","name=()","new()","new()","new()","new()","new()","new()","next()","palindrome?()","palindrome?()","palindrome?()","parse_expression()","pop_from_stack()","precedence()","prev()","primes()","print()","print_diagonally()","push_to_stack()","rps_game_winner()","rps_tournament_winner()","show_a()","total_count()","x()"],"longSearchIndex":["a","binarydecimalconverter","c","c::m","c::m::n","c::m::n::d","car","cartesianproduct","class","dessert","diagonalmatrixprint","enumerable","foo","il","il::node","jellybean","nosuchstrategyerror","numeric","object","palantir","stack","stacklike","string","wrongnumberofplayerserror","car::add_make()","class#attr_accessor_with_history()","binarydecimalconverter#bin_to_dec()","dessert#calories()","dessert#calories=()","object#change_distribution()","object#combine_anagrams()","object#contains_game()","palantir#convert_to_base_10()","palantir#convert_to_postfix()","object#count_words()","binarydecimalconverter#dec_to_bin()","dessert#delicious?()","jellybean#delicious?()","cartesianproduct#each()","palantir#evaluate_postfix()","object#fibo_memoized()","object#fibo_n()","jellybean#flavor()","jellybean#flavor=()","object#frm()","diagonalmatrixprint#get_matrix()","dessert#healthy?()","a#hello()","a::hello()","object#is_anagram()","car#make_mates()","numeric#method_missing()","dessert#name()","dessert#name=()","car::new()","cartesianproduct::new()","dessert::new()","il::node::new()","jellybean::new()","stacklike::new()","il::node#next()","enumerable#palindrome?()","object#palindrome?()","string#palindrome?()","palantir#parse_expression()","stacklike#pop_from_stack()","palantir#precedence()","il::node#prev()","object#primes()","stacklike#print()","diagonalmatrixprint#print_diagonally()","stacklike#push_to_stack()","object#rps_game_winner()","object#rps_tournament_winner()","c::m::n::d#show_a()","car::total_count()","c#x()"],"info":[["A","","A.html","","<p>Class for testing <code>self</code> variable Usage:\n\n<pre>a = A.new\nA.hello\na.hello</pre>\n"],["BinaryDecimalConverter","","BinaryDecimalConverter.html","","<p>Class that defines methods for decimal &lt;-&gt; binary conversion\n"],["C","","C.html","","<p>Testing variable <code>self</code> value after recursion Usage:\n\n<pre>c = C.new\nc.x(&quot;First value for a&quot;, true)</pre>\n<p>Testing class …\n"],["C::M","","C/M.html","","<p>Testing module\n"],["C::M::N","","C/M/N.html","","<p>Testing module\n"],["C::M::N::D","","C/M/N/D.html","","<p>Testing class\n"],["Car","","Car.html","",""],["CartesianProduct","","CartesianProduct.html","","<p>c = CartesianProduct.new(, [:c, :d, :e]) c.each { |elt| puts elt.inspect }\n(nothing printed since Cartesian …\n"],["Class","","Class.html","","<p>advanced OOP with some metaprogramming\n"],["Dessert","","Dessert.html","","<p>(a) Create a class Dessert with getters and setters for name and calories.\nDefine instance methods healthy?, …\n"],["DiagonalMatrixPrint","","DiagonalMatrixPrint.html","","<p>Given a 2D  regular (n x n) matrix, prints all elements of the given matrix\nin diagonal order. For  …\n"],["Enumerable","","Enumerable.html","","<p>Metaprogramming Enumerable class\n"],["Foo","","Foo.html","","<p>Usage:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-constant\">Foo</span>.<span class=\"ruby-identifier\">new</span> \n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">bar</span> = <span class=\"ruby-value\">1</span> \n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">bar</span> = <span class=\"ruby-value\">2</span> \n<span class=\"ruby-identifier\">print</span> <span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">bar</span>\n<span class=\"ruby-identifier\">print</span> <span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">bar_history</span> \n=<span class=\"ruby-operator\">&gt;</span> [<span class=\"ruby-keyword\">nil</span>,<span class=\"ruby-value\">1</span>,<span class=\"ruby-value\">2</span>]\n</pre>\n"],["IL","","IL.html","","<p>Infinite list <strong>IL</strong> module\n"],["IL::Node","","IL/Node.html","","<p><strong>Node</strong> class that represents one element in list\n"],["JellyBean","","JellyBean.html","","<p>(b) Create a class JellyBean that extends Dessert, and add a getter and\nsetter for flavor. Modify delicious? …\n"],["NoSuchStrategyError","","NoSuchStrategyError.html","","<p>Custom error class\n"],["Numeric","","Numeric.html","","<p>Metaprogramming <strong>Numeric</strong> <code>class</code> Usage:\n\n<pre># Convert dollars to yen\np 5.yen\n\n# Convert dollars to euro\np 10.euro</pre>\n"],["Object","","Object.html","",""],["Palantir","","Palantir.html","","<p>Usage:\n\n<pre>    #Input\n    1430_5 - 110_2 * 2A_12 + 10_10\n\n#Output:\n    46</pre>\n"],["Stack","","Stack.html","","<p>Stack class Usage:\n\n<pre>a = Stack.new()\n\np a.push_to_stack 1\np a.push_to_stack 2\np a.push_to_stack 3\n\np a.print ...</pre>\n"],["Stacklike","","Stacklike.html","","<p>Stacklike module that gives classes ability of stacking\n"],["String","","String.html","","<p>Metaprogramming String class\n"],["WrongNumberOfPlayersError","","WrongNumberOfPlayersError.html","","<p>Custom error class\n"],["add_make","Car","Car.html#method-c-add_make","(make)","<p>Method for addind a <code>make</code> to +@makes+ array\n"],["attr_accessor_with_history","Class","Class.html#method-i-attr_accessor_with_history","(attr_name)",""],["bin_to_dec","BinaryDecimalConverter","BinaryDecimalConverter.html#method-i-bin_to_dec","(number)","<p>Gets the last digit and raises it to power of counter then it is added to\nresult handles only positive …\n"],["calories","Dessert","Dessert.html#method-i-calories","()","<p>calories getter\n"],["calories=","Dessert","Dessert.html#method-i-calories-3D","(new_cal)","<p>calories setter\n"],["change_distribution","Object","Object.html#method-i-change_distribution","(change)","<p>Calculates what is the distribution of coins/bills you get as change works\nonly in ruby 2.0 because of …\n"],["combine_anagrams","Object","Object.html#method-i-combine_anagrams","(words)","<p>Accepts an array of <code>words</code> and combines anagrams into subarrays\nUsage:\n\n<pre>s = [&#39;cars&#39;, &#39;for&#39;, &#39;potatoes&#39;, ...</pre>\n"],["contains_game","Object","Object.html#method-i-contains_game","(game)","<p>determines if an array given contains game to be played\n"],["convert_to_base_10","Palantir","Palantir.html#method-i-convert_to_base_10","(num, base)","<p>converts <code>num</code> to base 10 from <code>base</code> (2..9)\n"],["convert_to_postfix","Palantir","Palantir.html#method-i-convert_to_postfix","(infix)","<p>converts <code>infix</code> to <strong>postfix</strong> type\n"],["count_words","Object","Object.html#method-i-count_words","(string)","<p>Given a string of input, return a hash whose keys are words in the string\nand whose values  are the number …\n"],["dec_to_bin","BinaryDecimalConverter","BinaryDecimalConverter.html#method-i-dec_to_bin","(number)","<p>gets the result of +number % 2+. Appends the result at the beginning of the\nstring and divides the number …\n"],["delicious?","Dessert","Dessert.html#method-i-delicious-3F","()","<p>delicious method -&gt; kinda useless\n"],["delicious?","JellyBean","JellyBean.html#method-i-delicious-3F","()","<p>delicious method\n"],["each","CartesianProduct","CartesianProduct.html#method-i-each","()","<p>each method\n"],["evaluate_postfix","Palantir","Palantir.html#method-i-evaluate_postfix","(postfix)","<p>evaluates postfix using <code>stack</code>\n"],["fibo_memoized","Object","Object.html#method-i-fibo_memoized","(n)",""],["fibo_n","Object","Object.html#method-i-fibo_n","(n)","<p>Standard implementation of fibonacci sequence generation\n"],["flavor","JellyBean","JellyBean.html#method-i-flavor","()","<p>flavor getter\n"],["flavor=","JellyBean","JellyBean.html#method-i-flavor-3D","(new_flavor)","<p>flavor setter\n"],["frm","Object","Object.html#method-i-frm","(r, n, po)","<p>Calculates a fixed rate mortgage value\n<p>params r - interest rate (percentage)\n<p>params n - number of years …\n"],["get_matrix","DiagonalMatrixPrint","DiagonalMatrixPrint.html#method-i-get_matrix","(m)","<p>Get matrix from input\n"],["healthy?","Dessert","Dessert.html#method-i-healthy-3F","()","<p>Healthy method\n"],["hello","A","A.html#method-i-hello","()","<p><code>2</code>\n"],["hello","A","A.html#method-c-hello","()","<p><code>1</code>\n"],["is_anagram","Object","Object.html#method-i-is_anagram","(w1, w2)","<p>determines whether words are anagrams\n"],["make_mates","Car","Car.html#method-i-make_mates","()","<p>Makes mates, adds them to +@@cars+ array\n"],["method_missing","Numeric","Numeric.html#method-i-method_missing","(method_id, *args)","<p>Override of <code>method_missing</code> method\n"],["name","Dessert","Dessert.html#method-i-name","()","<p>name getter\n"],["name=","Dessert","Dessert.html#method-i-name-3D","(new_name)","<p>name setter\n"],["new","Car","Car.html#method-c-new","(make)","<p>Initialization method\n"],["new","CartesianProduct","CartesianProduct.html#method-c-new","(a1, a2)","<p>Initialization\n"],["new","Dessert","Dessert.html#method-c-new","(name, calories)",""],["new","IL::Node","IL/Node.html#method-c-new","(number)","<p>Initialization method *Node#initialize* represents <code>value</code> ,\n<code>next</code> and <code>prev</code> value / lambdas\n"],["new","JellyBean","JellyBean.html#method-c-new","(name, calories, flavor)","<p>Initialization method\n"],["new","Stacklike","Stacklike.html#method-c-new","()","<p>initialization\n"],["next","IL::Node","IL/Node.html#method-i-next","()","<p>call to <strong>next</strong>\n"],["palindrome?","Enumerable","Enumerable.html#method-i-palindrome-3F","()","<p>Defines palindrome method\n"],["palindrome?","Object","Object.html#method-i-palindrome-3F","(word)","<p>Write a method that determines whether a given word or phrase is a\npalindrome, that is, it  reads the …\n"],["palindrome?","String","String.html#method-i-palindrome-3F","()","<p>defines palindrome method\n"],["parse_expression","Palantir","Palantir.html#method-i-parse_expression","(expr)","<p>method for parsing expression\n"],["pop_from_stack","Stacklike","Stacklike.html#method-i-pop_from_stack","()","<p>Pop from stack\n"],["precedence","Palantir","Palantir.html#method-i-precedence","(a)","<p>defines precedence <code>hash</code> to determine order of the operations\n"],["prev","IL::Node","IL/Node.html#method-i-prev","()","<p>call to <strong>prev</strong>\n"],["primes","Object","Object.html#method-i-primes","(n)","<p>Program that generates first <code>n</code> prime numbers\n\n<pre>#Usage:\np primes(10)\np primes(20)</pre>\n"],["print","Stacklike","Stacklike.html#method-i-print","()","<p>Printing\n"],["print_diagonally","DiagonalMatrixPrint","DiagonalMatrixPrint.html#method-i-print_diagonally","(matrix)","<p>Prints matrix diagonally\n"],["push_to_stack","Stacklike","Stacklike.html#method-i-push_to_stack","(elem)","<p>Push to stack\n"],["rps_game_winner","Object","Object.html#method-i-rps_game_winner","(game)","<p>Determines the winner of the game\n"],["rps_tournament_winner","Object","Object.html#method-i-rps_tournament_winner","(tournament)","<p>Plays a tournament and determines the winner\n\n<pre>#Usage:\np rps_tournament_winner(tournament_list)</pre>\n"],["show_a","C::M::N::D","C/M/N/D.html#method-i-show_a","()","<p>Testing method\n"],["total_count","Car","Car.html#method-c-total_count","()","<p>getter for <code>total_count</code>\n"],["x","C","C.html#method-i-x","(value_for_a,recurse=false)","<p>Testing method\n"]]}}